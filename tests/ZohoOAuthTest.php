<?php


namespace Tests;


use MMHK\common\withCache;
use MMHK\Zoho\OAuth;
use PHPUnit\Framework\TestCase;

class ZohoOAuthTest extends TestCase
{
    use withCache;

    const CACHE_KEY_TOKEN = 'zoho_token';
    const CACHE_KEY_DEVICE_CODE = 'device_code';

    /**
     * @var \MMHK\Zoho\OAuth
     */
    protected $oauth;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $json = file_get_contents(__DIR__.'/secret/zoho.json');
        $options = json_decode($json, true);

        $this->oauth = new OAuth($options['client_id'], $options['client_secret']);
    }

    public function test_requireCode() {
        $resp = $this->oauth->requireCode();

//        var_dump($this->oauth);
        dump($resp);

        $this->assertNotEmpty($resp);

        $this->setCache(self::CACHE_KEY_DEVICE_CODE, array_get($resp, 'device_code'));
    }

    public function test_pullToken() {
        $deviceCode = $this->getCache(self::CACHE_KEY_DEVICE_CODE);

        $token = $this->oauth->pullToken($deviceCode);

        dump($token);

        $this->setCache(self::CACHE_KEY_TOKEN, $token);

        $this->assertNotEmpty($token);

    }

    public function test_getHeaders() {
        /**
         * @var $token \MMHK\Zoho\Token|null
         */
        $token = $this->getCache(self::CACHE_KEY_TOKEN);

//        dump($token);

        $this->assertNotEmpty($token);

        $headers = $token->getAuthHeaders();

        dump($headers);

        $token->refreshToken();

        $headers = $token->getAuthHeaders();

        dump($headers);

        $this->assertNotEmpty($headers);

    }
}