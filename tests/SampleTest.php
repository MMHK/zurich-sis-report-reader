<?php
/**
 * Created by PhpStorm.
 * User: mixmedia
 * Date: 2019/1/18
 * Time: 17:17
 */

namespace Tests;

use MMHK\GmailHelper;
use PHPUnit\Framework\TestCase;

class SampleTest extends TestCase
{
    /**
     * @var \MMHK\GmailHelper
     */
    protected $client;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->client = new GmailHelper(__DIR__.'/secret', dirname(__DIR__).'/temp');
    }


    public function test_getClient(){
        $client = $this->client->getClient();

        $this->assertNotEmpty($client);
    }

    public function test_getGmailService() {
        $service = $this->client->getGmailService();

        // Print the labels in the user's account.
        $user = 'me';
        $results = $service->users_labels->listUsersLabels($user);

        if (count($results->getLabels()) == 0) {
            print "No labels found.\n";
        } else {
            print "Labels:\n";
            foreach ($results->getLabels() as $label) {
                printf("- %s\n", $label->getName());
            }
        }

        $this->assertNotEmpty($service);
    }

    public function test_searchMail() {
        $service = $this->client->getGmailService();

        $resp = $service->users_messages->listUsersMessages('me', [
            'includeSpamTrash' => true,
            'maxResults' => 10,
            'q' => 'from:(IT-GI@hk.zurich.com) subject:(SIS API Upload to SIS Report for motors.com.hk)'
        ]);

        $list = $resp->getMessages();
        foreach ($list as $row) {
            /**
             * @var $row \Google_Service_Gmail_Message
             */
            $msg = $this->client
                ->getMailDetail($row->getId());

            print_r($msg);
//            print_r($msg->getPayload()->getHeaders());
        }

        $this->assertTrue(true);
    }

    public function test_run() {
        $this->client->run(500);


        $this->assertTrue(true);
    }

    public function test_clearTempFiles() {
        $this->client->clearTempFiles();


        $this->assertTrue(true);
    }

    public function test_export_error_report() {
        $this->client->export_error_report(__DIR__.'/report');

        $this->assertTrue(true);
    }

    public function test_gs_get_msg_list() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\geestar\\temp';
        $cert = 'D:\\_Sam\\TestProject\\PHP\\gmail\\code\\tests\\secret';
        $service = new GmailHelper($cert, $temp);

        $resp = $service->getGmailService()->users_messages->listUsersMessages('me', [
            'q' => 'from:(IT-GI@hk.zurich.com) subject:(SIS API)',
            'includeSpamTrash' => false,
            'maxResults' => 10,
        ]);

        var_dump($resp);

        $this->assertNotEmpty($resp);
    }

    public function test_gs_get_detail() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\geestar\\temp';
        $cert = 'D:\\_Sam\\TestProject\\PHP\\gmail\\code\\tests\\secret';
        $service = new GmailHelper($cert, $temp);
        $resp = $service->getMailDetail('1685e42b89aeaeff');

        var_dump($resp);

        $this->assertNotEmpty($resp);
    }

    public function test_motors_get_msg_list() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\motors\\temp';
        $cert = 'D:\\_Sam\\TestProject\\PHP\\gmail\\code\\tests\\secret';
        $service = new GmailHelper($cert, $temp);

        $resp = $service->getGmailService()->users_messages->listUsersMessages('me', [
            'q' => 'from:(IT-GI@hk.zurich.com) subject:(SIS API)',
            'includeSpamTrash' => false,
            'maxResults' => 10,
        ]);

        var_dump($resp);

        $this->assertNotEmpty($resp);
    }

    public function test_motors_get_detail() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\motors\\temp';
        $cert = 'D:\\_Sam\\TestProject\\PHP\\gmail\\code\\tests\\secret';
        $service = new GmailHelper($cert, $temp);
        $resp = $service->getMailDetail('168688f83c35e061');

        var_dump($resp);

        $this->assertNotEmpty($resp);
    }

    public function test_fix_gs_files() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\geestar\\temp';

        $list = glob($temp.'/*.json');
        foreach ($list as $row) {
            $json = json_decode(file_get_contents($row), 1);
            if (!empty($json['password'])) {
                $subject = str_replace(' (password) ', '', $json['subject']);
                $json['attachment_hash'] = md5($subject);
            }
            file_put_contents($row, json_encode($json));
        }
    }

    public function test_fix_rm_files() {
        $temp = 'D:\\_Sam\\TestProject\\PHP\\gmail\\reacingmax\\temp';

        $list = glob($temp.'/*.json');
        foreach ($list as $row) {
            $json = json_decode(file_get_contents($row), 1);
            if (!empty($json['password'])) {
                $subject = str_replace(' (password)', '', $json['subject']);
                $json['attachment_hash'] = md5($subject);
            }
            file_put_contents($row, json_encode($json));
        }
    }

    public function test_diff() {
        $t1 = 'SIS API Upload to SIS Report for GeeStar Ltd.- Run Date: 12\/05\/2018';
        $t2 = 'SIS API Upload to SIS Report for GeeStar Ltd. (password) - Run Date: 24\/02\/2018';

        $t1 = str_replace(' (password)', '', $t1);
        $t2 = str_replace(' (password)', '', $t2);

        $this->assertSame($t1, $t2);

        $t1_hash = md5($t1);
        $t2_hash = md5($t2);

        $this->assertSame($t1_hash, $t2_hash);
    }
}